<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | Rob Johnson]]></title>
  <link href="http://www.robjoh.com/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://www.robjoh.com/"/>
  <updated>2014-08-17T18:17:02-07:00</updated>
  <id>http://www.robjoh.com/</id>
  <author>
    <name><![CDATA[Rob Johnson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accessing Azure Service Bus With Node.js]]></title>
    <link href="http://www.robjoh.com/blog/2014/08/16/accessing-azure-service-bus-with-node-dot-js/"/>
    <updated>2014-08-16T13:00:41-07:00</updated>
    <id>http://www.robjoh.com/blog/2014/08/16/accessing-azure-service-bus-with-node-dot-js</id>
    <content type="html"><![CDATA[<p>One of the services we are building makes use of Azure Service Bus and we decided that we&rsquo;d like to monitor the lengths of some of the subscriptions. I&rsquo;ve been wanting to learn Node.js and so this sounded like a simple and fun project to start with. For the purpose of this post, I used the <a href="https://manage.windowsazure.com">azure portal</a> to create a new service bus namespace <em>azure-service-bus-nodejs</em> with a single topic <em>my-topic</em> that has a single subscription <em>my-subscription</em>. You can find the code on GitHub at <a href="https://github.com/robjoh/azure-service-bus-nodejs,">https://github.com/robjoh/azure-service-bus-nodejs,</a> at the end of each section I&rsquo;m including a link to the respective commit.</p>

<h3>Getting Started</h3>

<p>After <a href="http://nodejs.org/download/">installing Node.js</a> I use <code>npm init</code> to begin a new project. This command asks a few questions (name, version&hellip;) and creates a package.json file that we&rsquo;ll be making use of shortly.</p>

<p><img src="/images/azure-node-npm-init.png" title="npm init" alt="package.json" /></p>

<p><small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/d675e48768f85a25c211614f8a04b616b30a7b26">commit d675e487</a></small></p>

<h3>Connecting to Azure Service Bus</h3>

<p>Now let&rsquo;s install the <a href="https://github.com/Azure/azure-sdk-for-node">Azure sdk for node</a> with <code>npm install azure --save</code>. The &mdash;save option adds azure to the dependencies section of package.json. With the azure sdk is installed, I next create a server.js file which will contain the following program.</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var namespace = &lsquo;azure-service-bus-nodejs&rsquo;,</p>

<pre><code>accessKey = '[Access key for this namespace]',
azure = require('azure');
</code></pre>

<p>var client = azure.createServiceBusService(namespace, accessKey);</p>

<p>client.listTopics(function(error, result, response) {</p>

<pre><code>if (error) {
    console.log(error);
    return;
}

console.log(JSON.stringify(result, null, 3));
</code></pre>

<p>});
```</p>

<p>In this program, we import the azure sdk using node&rsquo;s <em>require()</em> function. Next we create a service bus client for the <em>azure-service-bus-nodejs</em> namespace and execute the listTopics function. If successful, the <em>error</em> parameter will be null and the <em>result</em> parameter will contain the list of topics. Running the program with <code>node server.js</code> outputs the details of <em>my-topic</em>.</p>

<p><img src="/images/azure-node-list-topics.png" title="node server.js" alt="List of topics" /></p>

<p><small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/32e56247885073a500fe78ce2a8ee2ae6fc7b314">commit 32e56247</a></small></p>

<h3>Make it a web service</h3>

<p>Now that we have the basic code for retrieving the list of topics, let&rsquo;s expose that functionality over http.</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var namespace = &lsquo;azure-service-bus-nodejs&rsquo;,</p>

<pre><code>accessKey = '[Access key for this namespace]',
azure = require('azure'),
http = require('http');
</code></pre>

<p>var client = azure.createServiceBusService(namespace, accessKey);</p>

<p>var server = http.createServer(function(httpReq, httpResp) {</p>

<pre><code>client.listTopics(function(error, result, response) {
    if (error) {
        httpResp.writeHead(500, {'Content-Type': 'application/json'});
        httpResp.write(JSON.stringify(error, null, 3));
        httpResp.end();
        return;
    }

    var topics = result.map(function(topic) {
        return {
            name: topic.TopicName,
            totalSubscriptions: topic.SubscriptionCount,
            totalSize: topic.SizeInBytes 
        };
    });

    httpResp.writeHead(200, {'Content-Type': 'application/json'});
    httpResp.write(JSON.stringify(topics, null, 3));
    httpResp.end();
});
</code></pre>

<p>});</p>

<p>server.listen(8080);
```</p>

<p>In this code we pull in node&rsquo;s <a href="http://nodejs.org/api/http.html">http module</a> and create a server that listens on port 8080. <em>createServer()</em> takes a function with arguments for the http request and response. When the server receives a request we make the listTopics call. If an error occurs we will return a 500 with the details. On a successful call, we&rsquo;ll use the <em>map</em> function to return an array of topic information. The http request/response would look like this.</p>

<p>```http
GET <a href="http://localhost:8080/">http://localhost:8080/</a> HTTP/1.1
Host: localhost:8080</p>

<p>HTTP/1.1 200 OK
Content-Type: application/json
Date: Sun, 17 Aug 2014 19:15:51 GMT
Content-Length: 95</p>

<p>[
   {</p>

<pre><code>  "name": "my-topic",
  "totalSubscriptions": "1",
  "totalSize": "0"
</code></pre>

<p>   }
]
```
<small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/ae2a14404ed51d0beb73a068685d512e6442b3ae">commit ae2a1440</a></small></p>

<h3>What about subscriptions</h3>

<p>Next we&rsquo;ll add support to get the list of subscriptions for a topic. We&rsquo;ll now accept the topic name as the url path. The code has also been broken up into a few functions with clearer repsonsibilities such as getting the data, writing the response and better organization.</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var namespace = &lsquo;azure-service-bus-nodejs&rsquo;,</p>

<pre><code>accessKey = '[Access key for this namespace]',
azure = require('azure'),
http = require('http');
</code></pre>

<p>var client = azure.createServiceBusService(namespace, accessKey);</p>

<p>var server = http.createServer(function(httpReq, httpResp) {</p>

<pre><code>if (httpReq.url === '/') {
    getTopics(writeResult);
} else {
    getSubscriptions(httpReq.url.slice(1), writeResult);
}

function getTopics(callback) {
    client.listTopics(function(error, result, response) {
        if (error) {
            callback(error)
            return;
        }

        var topics = result.map(function(topic) {                
            return {
                name: topic.TopicName,
                totalSubscriptions: topic.SubscriptionCount,
                totalSize: topic.SizeInBytes 
            };
        });

        callback(null, topics);
    });
}

function getSubscriptions(topic, callback) {
    client.listSubscriptions(topic, function(error, result, response) {
        if (error) {
            callback(error);
            return;
        }

        var subscriptions = result.map(function(subscription) {
            return {
                name: subscription.SubscriptionName,
                totalMessages: subscription.MessageCount
            };
        });

        callback(null, subscriptions);
    });
}

function writeResult(error, result) {
    if (error) {
        httpResp.writeHead(500, {'Content-Type': 'application/json'});
        httpResp.write(JSON.stringify(error, null, 3));
        httpResp.end();
        return;
    }

    httpResp.writeHead(200, {'Content-Type': 'application/json'});
    httpResp.write(JSON.stringify(result, null, 3));
    httpResp.end();
}
</code></pre>

<p>});</p>

<p>server.listen(8080);
```</p>

<p>So we can now request the list of subscriptions for a specific topic.
```http
GET <a href="http://localhost:8080/my-topic">http://localhost:8080/my-topic</a> HTTP/1.1
Host: localhost:8080</p>

<p>HTTP/1.1 200 OK
Content-Type: application/json
Date: Sun, 17 Aug 2014 21:06:30 GMT
Content-Length: 73</p>

<p>[
   {</p>

<pre><code>  "name": "my-subscription",
  "totalMessages": "0"
</code></pre>

<p>   }
]
```
<small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/6a41227305bc20e6ba836b889b3bb09eb91a14b9">commit 6a412273</a></small></p>

<h3>Move service bus to a module</h3>

<p>Now let&rsquo;s move the service bus specific code to a service-bus.js module. This will help reduce the growing mix of request/response handling and application logic.</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var azure = require(&lsquo;azure&rsquo;);</p>

<p>function mapTopic(topic) {</p>

<pre><code>return {
    name: topic.TopicName,
    totalSubscriptions: topic.SubscriptionCount,
    totalSize: topic.SizeInBytes 
};
</code></pre>

<p>}</p>

<p>function mapSubscription(subscription) {</p>

<pre><code>return {
    name: subscription.SubscriptionName,
    totalMessages: subscription.MessageCount
};
</code></pre>

<p>}</p>

<p>function createClient(namespace, accessKey) {</p>

<pre><code>var client = azure.createServiceBusService(namespace, accessKey);

return {
    getTopics: function (callback) {
        client.listTopics(function(error, result, response) {
            if (error) {
                callback(error)
                return;
            }

            callback(null, result.map(mapTopic));
        });
    },

    getSubscriptions: function (topic, callback) {
        client.listSubscriptions(topic, function(error, result, response) {
            if (error) {
                callback(error);
                return;
            }

            callback(null, result.map(mapSubscription));
        });
    },

    getSubscription: function (topic, subscription, callback) {
        client.getSubscription(topic, subscription, function(error, result, response) {
            if (error) {
                callback(error);
                return;
            }

            callback(null, mapSubscription(result));
        });
    }
};
</code></pre>

<p>}</p>

<p>module.exports.createClient = createClient;
<code>``
The [module system](http://nodejs.org/api/modules.html) allows us to move the map functions out but they will remain private to this module. Only things exported via</code>module.exports<code>are available externally and so we export a single method to enable client creation. To reference our module we simply</code>require(&lsquo;./service-bus.js&rsquo;)`. Now our server.js has been reduced to the following.</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var namespace = &lsquo;azure-service-bus-nodejs&rsquo;,</p>

<pre><code>accessKey = '[Access key for this namespace]',
serviceBus = require('./service-bus.js'),
http = require('http');
</code></pre>

<p>var client = serviceBus.createClient(namespace, accessKey);</p>

<p>var server = http.createServer(function(httpReq, httpResp) {</p>

<pre><code>if (httpReq.url === '/') {
    client.getTopics(writeResult);
} else {
    var parts = httpReq.url.split('/');
    if (parts.length === 2) {
        client.getSubscriptions(parts[1], writeResult);
    } else {
        client.getSubscription(parts[1], parts[2], writeResult);
    }
}

function writeResult(error, result) {
    if (error) {
        httpResp.writeHead(500, {'Content-Type': 'application/json'});
        httpResp.write(JSON.stringify(error, null, 3));
        httpResp.end();
        return;
    }

    httpResp.writeHead(200, {'Content-Type': 'application/json'});
    httpResp.write(JSON.stringify(result, null, 3));
    httpResp.end();
}
</code></pre>

<p>});</p>

<p>server.listen(8080);
```
<small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/1ebd6fbf376cac48740692c0836c8e5e10b3eecb">commit 1ebd6fbf</a></small></p>

<h3>Easier http with Express</h3>

<p>As the application has grown, the http request/response manipulation has been getting more complex and fraught with other issues such as ignoring http verbs. Let&rsquo;s pull in <a href="http://expressjs.com/">express</a> and clean this up. As earlier, we pull in express with <code>npm install express --save</code> and <code>require('express')</code>. As shown in the following code, you can set up handlers for verb/template combinations. For example, app.get(&lsquo;/:topic&rsquo;) matches an HTTP GET for /my-topic. If you look closely you&rsquo;ll notice that the topic parameter has been placed into httpReq.params.topic saving us from all of that parsing. Other nice things are the chainability of the response and it&rsquo;s automatic json conversion (no more JSON.stringify).</p>

<p>```javascript
&ldquo;use strict&rdquo;</p>

<p>var namespace = &lsquo;azure-service-bus-nodejs&rsquo;,</p>

<pre><code>accessKey = '[Access key for this namespace]',
serviceBus = require('./service-bus.js'),
http = require('http'),
express = require('express');
</code></pre>

<p>var client = serviceBus.createClient(namespace, accessKey);
var app = express();</p>

<p>app.get(&lsquo;/&rsquo;, function(httpReq, httpResp) {</p>

<pre><code>client.getTopics(writeResult(httpResp));
</code></pre>

<p>});</p>

<p>app.get(&lsquo;/:topic&rsquo;, function(httpReq, httpResp) {</p>

<pre><code>client.getSubscriptions(httpReq.params.topic, writeResult(httpResp));
</code></pre>

<p>});</p>

<p>app.get(&lsquo;/:topic/:subscription&rsquo;, function(httpReq, httpResp) {</p>

<pre><code>client.getSubscription(httpReq.params.topic, httpReq.params.subscription, writeResult(httpResp));
</code></pre>

<p>});</p>

<p>http.createServer(app).listen(8080);</p>

<p>function writeResult(httpResp) {</p>

<pre><code>return function(error, result) {
    if (error) {
        httpResp.status(500).send(error);
        return;
    }

    httpResp.status(200).send(result);
}
</code></pre>

<p>}
```
<small><a href="https://github.com/robjoh/azure-service-bus-nodejs/commit/9a01d5d03951f34a0c06aa189ab786cbde7d0c98">commit 9a01d5d0</a></small></p>

<h3>Wrapping up</h3>

<p>This was a lot of fun but barely scratches the surface of Node.js, express and service bus. Next time I will deploy this to an <a href="http://azure.microsoft.com/en-us/services/websites/">Azure website</a> and integrate it with <a href="http://msdn.microsoft.com/en-us/library/dn481095.aspx">Application Insights</a>.</p>
]]></content>
  </entry>
  
</feed>
